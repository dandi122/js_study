<div th:fragment="frag_index_content" class="content-wrapper">
	<!-- Content Header (Page header) -->
	<div class="content-header">
		<div class="container-fluid">
			<div class="row mb-2">
				<div class="col-sm-6">
					<h1 class="m-0">Dashboard</h1>
				</div><!-- /.col -->
				<div class="col-sm-6">
					<ol class="breadcrumb float-sm-right">
						<li class="breadcrumb-item"><a href="#">Home</a></li>
						<li class="breadcrumb-item active">Dashboard v1</li>
					</ol>
				</div><!-- /.col -->
			</div><!-- /.row -->
		</div><!-- /.container-fluid -->
	</div>
	<!-- /.content-header -->

	<!-- Main content -->
	<section class="content">
		<div class="container-fluid">
			<!-- Small boxes (Stat box) -->
			<div class="row">
				<div class="col-md-6">



					<div class="card card-danger">
						<div class="card-header">
							<h3 class="card-title">Donut Chart</h3>
							<div class="card-tools">
								<button type="button" class="btn btn-tool" data-card-widget="collapse">
									<i class="fas fa-minus"></i>
								</button>
								<button type="button" class="btn btn-tool" data-card-widget="remove">
									<i class="fas fa-times"></i>
								</button>
							</div>
						</div>
						<div class="card-body">
							<div class="chartjs-size-monitor">
								<div class="chartjs-size-monitor-expand">
									<div class=""></div>
								</div>
								<div class="chartjs-size-monitor-shrink">
									<div class=""></div>
								</div>
							</div>
							<canvas id="donutChart"
								style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%; display: block; width: 317px;"
								width="634" height="500" class="chartjs-render-monitor"></canvas>
						</div>

					</div>



				</div>

				<div class="col-md-6">


					<div class="card card-success">
						<div class="card-header">
							<h3 class="card-title">Bar Chart</h3>
							<div class="card-tools">
								<button type="button" class="btn btn-tool" data-card-widget="collapse">
									<i class="fas fa-minus"></i>
								</button>
								<button type="button" class="btn btn-tool" data-card-widget="remove">
									<i class="fas fa-times"></i>
								</button>
							</div>
						</div>
						<div class="card-body">
							<div class="chart">
								<div class="chartjs-size-monitor">
									<div class="chartjs-size-monitor-expand">
										<div class=""></div>
									</div>
									<div class="chartjs-size-monitor-shrink">
										<div class=""></div>
									</div>
								</div>
								<canvas id="barChart"
									style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%; display: block; width: 317px;"
									width="634" height="500" class="chartjs-render-monitor"></canvas>
							</div>
						</div>

					</div>




				</div>

			</div>


			<!-- /.row -->
			<div class="row">
				<div class="col-md-12">
					<div class="card">
						<div class="card-header">
							<h3 class="card-title">jsGrid</h3>
						</div>
						<!-- /.card-header -->
						<div class="card-body">
							<div id="jsGrid1"></div>
						</div>
						<!-- /.card-body -->
					</div>
				</div>
			</div>

		</div><!-- /.container-fluid -->
	</section>
	<script>
		// 바로 위에 차트 자리에 있는 요소를 엑세스하여 차트 및 테이블을 완성
		// 1. 통신
		axios.get('/api/sales')
			.then(res => {
				// 통신 응답이 오면 아래 코드 진행
				const {data} = res; // sales의 11개 집계 데이터를 획득
				console.log(data);
				makeChart(data);    // 차트 동적으로 만들기
			});
		
		// 2. 통신이 끝나면 차트 그리기(총 3개, 1개만 실습, 2개는 파악해서 진행)
		function makeChart (data) {
			// 2-1. 차트 그리기에 필요한 데이터 형태로 파싱
			// 2-1-1. data에서 category값만 추출한다 => 형태는 배열
			// data => [{...}, {,,}]
			
			const categories = data.map(sale => sale.category)
			console.log(categories);  // [food, drink,,....]
			// 2-2. 차트에 데이터 주입
		}
		
		function initDChart( cate_lables) {
		    // 1. 문서 전체에서 id값이 donutChart인 요소를 찾아서 -> 2D 그래픽 컨텍스트 객체를 획득해라
		    var donutChartCanvas = $('#donutChart').get(0).getContext('2d')
		    
		    // 2. 차트를 그릴려면 => 데이터가 필요 => 데이터
		    var donutData        = {
		      // 카테고리 값 세팅 
		      labels: lables,
		      datasets: [
		        {
		          data: [700,500,400,600,300,100],
		          backgroundColor : ['#f56954', '#00a65a', '#f39c12', '#00c0ef', '#3c8dbc', '#d2d6de'],
		        }
		      ]
		    }
		    var donutOptions     = {
		      maintainAspectRatio : false,
		      responsive : true,
		    }
		    //Create pie or douhnut chart
		    // You can switch between pie and douhnut using the method below.
		    new Chart(donutChartCanvas, {
		      type: 'doughnut',
		      data: donutData,
		      options: donutOptions
		    })
		}

		   
	</script>
</div>
<!-- /.content-wrapper -->